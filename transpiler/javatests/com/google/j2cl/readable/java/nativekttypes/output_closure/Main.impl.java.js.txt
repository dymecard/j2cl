goog.module('nativekttypes.Main$impl');

const j_l_Object = goog.require('java.lang.Object$impl');
const $Util = goog.require('nativebootstrap.Util$impl');

let Class = goog.forwardDeclare('java.lang.Class$impl');
let j_l_String = goog.forwardDeclare('java.lang.String$impl');
let NativeTopLevel = goog.forwardDeclare('nativekttypes.NativeTopLevel$impl');
let Inner = goog.forwardDeclare('nativekttypes.NativeTopLevel.Inner$impl');
let Nested = goog.forwardDeclare('nativekttypes.NativeTopLevel.Nested$impl');
let $Casts = goog.forwardDeclare('vmbootstrap.Casts$impl');

class Main extends j_l_Object {
 /** @protected */
 constructor() {
  super();
  /**@type {NativeTopLevel<?string>}*/
  this.f_topLevelField__nativekttypes_Main;
  /**@type {Nested<?string>}*/
  this.f_nestedField__nativekttypes_Main;
  /**@type {Inner<?string, ?string>}*/
  this.f_innerField__nativekttypes_Main;
 }
 /** @return {!Main} */
 static $create__() {
  Main.$clinit();
  let $instance = new Main();
  $instance.$ctor__nativekttypes_Main__();
  return $instance;
 }
 
 $ctor__nativekttypes_Main__() {
  this.$ctor__java_lang_Object__();
 }
 
 m_methodArguments__nativekttypes_NativeTopLevel__nativekttypes_NativeTopLevel_Nested__nativekttypes_NativeTopLevel_Inner(/** NativeTopLevel<?string> */ foo, /** Nested<?string> */ nested, /** Inner<?string, ?string> */ inner) {}
 
 m_memberAccess__() {
  let foo = /**@type {!NativeTopLevel<?string>}*/ (NativeTopLevel.$create__java_lang_Object('foo'));
  let fooInstanceMethod = /**@type {?string}*/ ($Casts.$to(foo.instanceMethod('foo'), j_l_String));
  let fooStaticMethod = /**@type {?string}*/ ($Casts.$to((foo, NativeTopLevel.staticMethod('foo')), j_l_String));
  let fooInstanceField = /**@type {?string}*/ ($Casts.$to(foo.f_instanceField__nativekttypes_NativeTopLevel, j_l_String));
  foo.f_instanceField__nativekttypes_NativeTopLevel = 'foo';
  let fooStaticField = (foo, NativeTopLevel.f_staticField__nativekttypes_NativeTopLevel);
  NativeTopLevel.f_staticField__nativekttypes_NativeTopLevel = 'foo';
  let nested = /**@type {!Nested<?string>}*/ (Nested.$create__java_lang_Object('foo'));
  let nestedInstanceMethod = /**@type {?string}*/ ($Casts.$to(nested.instanceMethod('foo'), j_l_String));
  let nestedStaticMethod = /**@type {?string}*/ ($Casts.$to((nested, Nested.staticMethod('foo')), j_l_String));
  let nestedInstanceField = /**@type {?string}*/ ($Casts.$to(nested.f_instanceField__nativekttypes_NativeTopLevel_Nested, j_l_String));
  nested.f_instanceField__nativekttypes_NativeTopLevel_Nested = 'foo';
  let nestedStaticField = (nested, Nested.f_staticField__nativekttypes_NativeTopLevel_Nested);
  Nested.f_staticField__nativekttypes_NativeTopLevel_Nested = 'foo';
  let inner = /**@type {!Inner<?string, ?string>}*/ (Inner.$create__nativekttypes_NativeTopLevel__java_lang_Object(foo, 'foo'));
 }
 
 m_typeLiterals__() {
  let c1 = Class.$get(NativeTopLevel);
  let c2 = Class.$get(Nested);
  let c3 = Class.$get(Inner);
 }
 
 m_casts__() {
  let o1 = /**@type {NativeTopLevel<?string>}*/ (null);
  let o2 = /**@type {Nested<?string>}*/ (null);
  let o3 = /**@type {Inner<?string, ?string>}*/ (null);
 }
 
 static $clinit() {
  Main.$clinit = () =>{};
  Main.$loadModules();
  j_l_Object.$clinit();
 }
 /** @return {boolean} */
 static $isInstance(/** ? */ instance) {
  return instance instanceof Main;
 }
 
 static $loadModules() {
  Class = goog.module.get('java.lang.Class$impl');
  j_l_String = goog.module.get('java.lang.String$impl');
  NativeTopLevel = goog.module.get('nativekttypes.NativeTopLevel$impl');
  Inner = goog.module.get('nativekttypes.NativeTopLevel.Inner$impl');
  Nested = goog.module.get('nativekttypes.NativeTopLevel.Nested$impl');
  $Casts = goog.module.get('vmbootstrap.Casts$impl');
 }
}
$Util.$setClassMetadata(Main, 'nativekttypes.Main');

exports = Main;

//# sourceMappingURL=Main.js.map
