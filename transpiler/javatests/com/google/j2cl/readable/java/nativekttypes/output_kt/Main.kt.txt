package nativekttypes

open class Main {
 @kotlin.jvm.JvmField var topLevelField: nativekttypes.nativekt.KTopLevel<kotlin.String?>? = null

 @kotlin.jvm.JvmField var nestedField: nativekttypes.nativekt.KTopLevel.KNested<kotlin.String?>? = null

 @kotlin.jvm.JvmField var innerField: nativekttypes.nativekt.KTopLevel<kotlin.String?>.KInner<kotlin.String?>? = null

 open fun methodArguments(foo: nativekttypes.nativekt.KTopLevel<kotlin.String?>?, nested: nativekttypes.nativekt.KTopLevel.KNested<kotlin.String?>?, inner: nativekttypes.nativekt.KTopLevel<kotlin.String?>.KInner<kotlin.String?>?) {}

 open fun memberAccess() {
  val foo: nativekttypes.nativekt.KTopLevel<kotlin.String?>? = nativekttypes.nativekt.KTopLevel<kotlin.String?>("foo")
  val fooInstanceMethod: kotlin.String? = foo!!.instanceMethod("foo")
  val fooStaticMethod: kotlin.String? = run {
   foo
   nativekttypes.nativekt.KTopLevel.staticMethod("foo")
  }
  val fooInstanceField: kotlin.String? = foo!!.instanceField
  foo!!.instanceField = "foo"
  val fooStaticField: kotlin.Any? = run {
   foo
   nativekttypes.nativekt.KTopLevel.staticField
  }
  nativekttypes.nativekt.KTopLevel.staticField = "foo"
  val nested: nativekttypes.nativekt.KTopLevel.KNested<kotlin.String?>? = nativekttypes.nativekt.KTopLevel.KNested<kotlin.String?>("foo")
  val nestedInstanceMethod: kotlin.String? = nested!!.instanceMethod("foo")
  val nestedStaticMethod: kotlin.String? = run {
   nested
   nativekttypes.nativekt.KTopLevel.KNested.staticMethod("foo")
  }
  val nestedInstanceField: kotlin.String? = nested!!.instanceField
  nested!!.instanceField = "foo"
  val nestedStaticField: kotlin.Any? = run {
   nested
   nativekttypes.nativekt.KTopLevel.KNested.staticField
  }
  nativekttypes.nativekt.KTopLevel.KNested.staticField = "foo"
  val inner: nativekttypes.nativekt.KTopLevel<kotlin.String?>.KInner<kotlin.String?>? = foo!!.KInner<kotlin.String?>("foo")
 }

 open fun typeLiterals() {
  val c1: java.lang.Class<*>? = nativekttypes.nativekt.KTopLevel::class.java
  val c2: java.lang.Class<*>? = nativekttypes.nativekt.KTopLevel.KNested::class.java
  val c3: java.lang.Class<*>? = nativekttypes.nativekt.KTopLevel.KInner::class.java
 }

 open fun casts() {
  val o1: nativekttypes.nativekt.KTopLevel<kotlin.String?>? = null as nativekttypes.nativekt.KTopLevel<kotlin.String?>?
  val o2: nativekttypes.nativekt.KTopLevel.KNested<kotlin.String?>? = null as nativekttypes.nativekt.KTopLevel.KNested<kotlin.String?>?
  val o3: nativekttypes.nativekt.KTopLevel<kotlin.String?>.KInner<kotlin.String?>? = null as nativekttypes.nativekt.KTopLevel<kotlin.String?>.KInner<kotlin.String?>?
 }
}

open class Bar<V>: nativekttypes.nativekt.KInterface<V>, nativekttypes.nativekt.KTopLevel<V> {
 internal constructor(v: V?): super(v)
}
