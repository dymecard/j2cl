package overwrittentypevariables

fun interface MyFunction<F, T> {
 fun apply(input: F?): T?
}

fun interface HashFunction<T>: overwrittentypevariables.MyFunction<T, kotlin.String?> {}

open class HashFunctions {
 companion object {
  @kotlin.jvm.JvmStatic
  fun <T> hashFunction(): overwrittentypevariables.HashFunction<T>? {
   return object : overwrittentypevariables.HashFunction<T> {
    open override fun apply(input: T?): kotlin.String? {
     return ""
    }
   }
  }

  @kotlin.jvm.JvmStatic
  fun <T: kotlin.Enum<T>?> enumHashFunction(): overwrittentypevariables.HashFunction<T>? {
   return object : overwrittentypevariables.HashFunction<T> {
    open override fun apply(input: T?): kotlin.String? {
     return "" + (input!! as java.lang.Enum<T>).ordinal()
    }
   }
  }
 }
}
