package jsenum

open class Main {
 companion object {
  @kotlin.jvm.JvmStatic
  fun testJsEnumSwitch() {
   var comparableJsEnum: jsenum.Main.ComparableJsEnum? = if (jsenum.Main.ComparableJsEnum.ONE.getValue() === 1) jsenum.Main.ComparableJsEnum.TWO else null
   SWITCH@ do {
    CASE@ do {
     CASE_1@ do {
      when (comparableJsEnum) {
       jsenum.Main.ComparableJsEnum.TWO -> {
        break@CASE_1
       }
       else -> {
        break@CASE
       }
      }
      break@SWITCH
     } while (false)
     break@SWITCH
    } while (false)
   } while (false)
   val comparable: kotlin.Comparable<*>? = comparableJsEnum
   comparableJsEnum = comparable as jsenum.Main.ComparableJsEnum?
   var intJsEnum: jsenum.Main.IntJsEnum? = if (jsenum.Main.IntJsEnum.ELEVEN.getValue() === 10) jsenum.Main.IntJsEnum.ELEVEN else null
   SWITCH_1@ do {
    CASE_2@ do {
     CASE_3@ do {
      when (intJsEnum) {
       jsenum.Main.IntJsEnum.TWENTY -> {
        break@CASE_3
       }
       else -> {
        break@CASE_2
       }
      }
      break@SWITCH_1
     } while (false)
     break@SWITCH_1
    } while (false)
   } while (false)
   val o: kotlin.Any? = intJsEnum
   intJsEnum = o as jsenum.Main.IntJsEnum?
   val equal: Boolean = intJsEnum === jsenum.Main.IntJsEnum.TWENTY
   var isInstance: Boolean = intJsEnum is jsenum.Main.IntJsEnum
   isInstance = intJsEnum is kotlin.Comparable<*>
   val stringJsEnum: jsenum.Main.StringJsEnum? = if (jsenum.Main.StringJsEnum.ONE.getValue() === "10") jsenum.Main.StringJsEnum.THREE else null
   SWITCH_2@ do {
    CASE_4@ do {
     CASE_5@ do {
      when (stringJsEnum) {
       jsenum.Main.StringJsEnum.ONE -> {
        break@CASE_5
       }
       else -> {
        break@CASE_4
       }
      }
      break@SWITCH_2
     } while (false)
     break@SWITCH_2
    } while (false)
   } while (false)
   (jsenum.Main.NativeStringEnum.ONE as java.lang.Enum<jsenum.Main.NativeStringEnum?>).compareTo(jsenum.Main.NativeStringEnum.THREE)
   (jsenum.Main.NativeStringEnum.ONE as java.lang.Enum<jsenum.Main.NativeStringEnum?>).equals(jsenum.Main.NativeStringEnum.THREE)
   (jsenum.Main.ComparableJsEnum.ONE as java.lang.Enum<jsenum.Main.ComparableJsEnum?>).compareTo(jsenum.Main.ComparableJsEnum.ZERO)
   (jsenum.Main.ComparableJsEnum.ONE as java.lang.Enum<jsenum.Main.ComparableJsEnum?>).equals(jsenum.Main.ComparableJsEnum.ZERO)
   val supplier: java.util.function.Supplier<jsenum.Main.ComparableJsEnum?>? = java.util.function.Supplier<jsenum.Main.ComparableJsEnum?> (fun(): jsenum.Main.ComparableJsEnum? {
    return jsenum.Main.ComparableJsEnum.ONE
   })
   val consummer: java.util.function.Consumer<jsenum.Main.ComparableJsEnum?>? = java.util.function.Consumer<jsenum.Main.ComparableJsEnum?> (fun(e: jsenum.Main.ComparableJsEnum?) {
    (e!! as java.lang.Enum<jsenum.Main.ComparableJsEnum?>).ordinal()
   })
  }

  @kotlin.jvm.JvmStatic
  fun testBoxUnboxWithTypeInference() {
   val templatedField: jsenum.Main.TemplatedField<jsenum.Main.ComparableJsEnum?>? = jsenum.Main.TemplatedField<jsenum.Main.ComparableJsEnum?>(jsenum.Main.ComparableJsEnum.ONE)
   var unboxed: jsenum.Main.ComparableJsEnum? = templatedField!!.getValue()
   unboxed = templatedField!!.value
   templatedField!!.value = jsenum.Main.ComparableJsEnum.ONE
   java.util.Arrays.asList(*(arrayOf<kotlin.Any?>(jsenum.Main.ComparableJsEnum.ONE) as Array<jsenum.Main.ComparableJsEnum?>))
   (templatedField!!.getValue()!! as java.lang.Enum<jsenum.Main.ComparableJsEnum?>).ordinal()
   val b: Boolean = jsenum.Main.ComparableJsEnum.ONE === jsenum.Main.boxingPassthrough(jsenum.Main.ComparableJsEnum.ONE)
  }

  @kotlin.jvm.JvmStatic
  fun <T> boxingPassthrough(t: T?): T? {
   return t
  }

  @kotlin.jvm.JvmStatic
  fun boxingWithGenerics() {
   jsenum.Main.Foo<kotlin.Any?>(java.util.Optional.of(jsenum.Main.IntJsEnum.MINUSONE))
  }
 }

 enum class ComparableJsEnum {
  ZERO,
  ONE,
  TWO;

  open fun getValue(): Int {
   return (this as java.lang.Enum<jsenum.Main.ComparableJsEnum?>).ordinal()
  }
 }

 enum class IntJsEnum {
  MINUSONE(-1),
  TWENTY(20),
  ELEVEN(11);

  @kotlin.jvm.JvmField var value: Int = 0

  open fun getValue(): Int {
   return this.value
  }

  constructor(value: Int) {
   this.value = value
  }
 }

 enum class StringJsEnum {
  ONE("ONE"),
  THREE("THREE");

  @kotlin.jvm.JvmField var value: kotlin.String? = null

  open fun getValue(): kotlin.String? {
   return this.value
  }

  constructor(value: kotlin.String?) {
   this.value = value
  }
 }

 enum class NonNullableStringJsEnum {
  ONE("ONE"),
  THREE("THREE");

  @kotlin.jvm.JvmField var value: kotlin.String

  open fun getValue(): kotlin.String? {
   return this.value
  }

  constructor(value: kotlin.String?) {
   this.value = value!!
  }
 }

 enum class NativeStringEnum {
  ONE,
  THREE;

 }

 open class TemplatedField<T> {
  @kotlin.jvm.JvmField var value: T? = null

  constructor(value: T?) {
   this.value = value
  }

  open fun getValue(): T? {
   return this.value
  }
 }

 open class Foo<T> {
  constructor(c: java.util.Optional<jsenum.Main.IntJsEnum?>?)
 }
}
