package varargs

open class Varargs {
 constructor(vararg args: Int)

 constructor(): this(1)

 open fun test(a: Int, vararg args: kotlin.Any?) {}

 open fun testCloneable(vararg args: kotlin.Cloneable?) {}

 open fun testSerializable(vararg args: java.io.Serializable?) {}

 open fun main() {
  val v: varargs.Varargs? = varargs.Varargs()
  v!!.test(1)
  v!!.test(1, (java.lang.Object() as kotlin.Any))
  v!!.test(1, (java.lang.Object() as kotlin.Any))
  v!!.test(1)
  v!!.test(1, *(arrayOf<Array<kotlin.Any?>?>() as Array<kotlin.Any?>))
  v!!.testCloneable(*(arrayOf<Array<kotlin.Any?>?>() as Array<kotlin.Cloneable?>))
  v!!.testSerializable(*(arrayOf<Array<kotlin.Any?>?>() as Array<java.io.Serializable?>))
 }

 companion object {
  @kotlin.jvm.JvmStatic
  fun <T> `fun`(vararg elements: T?) {}

  @kotlin.jvm.JvmStatic
  fun <E> bar(a: E?, b: E?) {
   varargs.Varargs.`fun`(a, b)
  }
 }
}

open class Child: varargs.Varargs {
 constructor(): super(1)
}
