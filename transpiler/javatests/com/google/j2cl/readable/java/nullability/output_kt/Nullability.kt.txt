package nullability

open class Nullability {
 @kotlin.jvm.JvmField var f1: kotlin.String = "Hello"

 @kotlin.jvm.JvmField var f2: kotlin.String? = null

 @kotlin.jvm.JvmField var f3: kotlin.String? = null

 @kotlin.jvm.JvmField var f4: kotlin.collections.MutableList<kotlin.String> = java.util.ArrayList<kotlin.String>()

 @kotlin.jvm.JvmField var f5: kotlin.collections.MutableList<kotlin.String>? = java.util.ArrayList<kotlin.String>()

 @kotlin.jvm.JvmField var f6: kotlin.collections.MutableList<kotlin.String?> = java.util.ArrayList<kotlin.String?>()

 @kotlin.jvm.JvmField var f7: kotlin.collections.MutableList<kotlin.String?>? = null

 @kotlin.jvm.JvmField var f8: Array<kotlin.String> = arrayOf<kotlin.String>()

 @kotlin.jvm.JvmField var f9: Array<kotlin.String?> = arrayOf<kotlin.String?>()

 @kotlin.jvm.JvmField var f10: Array<kotlin.String>? = arrayOf<kotlin.String>()

 @kotlin.jvm.JvmField var f12: kotlin.collections.MutableList<kotlin.String?>? = java.util.ArrayList<kotlin.String?>()

 @kotlin.jvm.JvmField var f13: kotlin.Any

 @kotlin.jvm.JvmField var f14: kotlin.Any? = null

 constructor(a: kotlin.String) {
  this.f13 = (java.lang.Object() as kotlin.Any)
 }

 open fun m1(a: kotlin.String, b: kotlin.collections.MutableList<kotlin.Double>, c: kotlin.String?): kotlin.String {
  return ""
 }

 open fun m2(a: kotlin.String?, b: kotlin.collections.MutableList<kotlin.Double?>): kotlin.String? {
  return ""
 }

 open fun m3(a: kotlin.String, vararg args: kotlin.String): kotlin.String? {
  return null
 }

 open fun m4(f: nullability.Nullability.MyFunction) {}

 open class Foo<T> {
  open fun bar(t: T?) {}

  open fun baz(): T? {
   return null
  }

  open override fun toString(): kotlin.String? {
   return "Foo"
  }
 }

 fun interface MyFunction {
  fun x(a: kotlin.String): kotlin.String
 }

 open class StringList: java.util.ArrayList<kotlin.String?>() {}

 open class StringComparator: java.util.Comparator<kotlin.String> {
  open override fun compare(a: kotlin.String, b: kotlin.String): Int {
   return 0
  }
 }

 open class NullableStringComparator: java.util.Comparator<kotlin.String?> {
  open override fun compare(a: kotlin.String?, b: kotlin.String?): Int {
   return 0
  }
 }

 fun interface NullableTemplatedReturn<T> {
  fun foo(): T?
 }

 open class NullableTemplatedReturnOverride: nullability.Nullability.NullableTemplatedReturn<kotlin.String?> {
  open override fun foo(): kotlin.String? {
   return "foo"
  }
 }
}
