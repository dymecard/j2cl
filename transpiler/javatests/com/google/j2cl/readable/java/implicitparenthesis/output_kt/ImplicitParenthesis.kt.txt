package implicitparenthesis

open class ImplicitParenthesis {
 open fun test() {
  implicitparenthesis.ImplicitParenthesis.examples()
  implicitparenthesis.ImplicitParenthesis.nonExamples()
 }

 companion object {
  @kotlin.jvm.JvmStatic
  internal fun examples() {
   var primitiveInt: Int
   var boxedInt: kotlin.Int?
   if (true) {
    primitiveInt = 5
    boxedInt = (java.lang.Integer(10) as kotlin.Int)
    primitiveInt = ((if (primitiveInt === 5) (java.lang.Integer(15) as kotlin.Int) else (java.lang.Integer(30) as kotlin.Int)) as java.lang.Integer).intValue()
    assert(primitiveInt === 15)
   }
   if (true) {
    primitiveInt = 5
    boxedInt = (java.lang.Integer(10) as kotlin.Int)
    primitiveInt = (run {
     boxedInt = java.lang.Integer.valueOf((boxedInt!! as java.lang.Integer).intValue() + primitiveInt)
     boxedInt
    }!! as java.lang.Integer).intValue()
    assert(primitiveInt === 15)
   }
   if (true) {
    primitiveInt = 5
    boxedInt = (java.lang.Integer(10) as kotlin.Int)
    primitiveInt = (run {
     boxedInt = java.lang.Integer.valueOf(primitiveInt)
     boxedInt
    }!! as java.lang.Integer).intValue()
    assert(primitiveInt === 5)
   }
   if (true) {
    primitiveInt = 5
    boxedInt = (java.lang.Integer(10) as kotlin.Int)
    primitiveInt = (run {
     val `$value`: kotlin.Int? = boxedInt
     boxedInt = java.lang.Integer.valueOf((boxedInt!! as java.lang.Integer).intValue() + 1)
     `$value`
    }!! as java.lang.Integer).intValue()
    assert(primitiveInt === 10)
   }
   if (true) {
    primitiveInt = 5
    boxedInt = (java.lang.Integer(10) as kotlin.Int)
    primitiveInt = (run {
     boxedInt = java.lang.Integer.valueOf((boxedInt!! as java.lang.Integer).intValue() + 1)
     boxedInt
    }!! as java.lang.Integer).intValue()
    assert(primitiveInt === 11)
   }
  }

  @kotlin.jvm.JvmStatic
  internal fun nonExamples() {
   var primitiveInt: Int
   var boxedInt: kotlin.Int?
   var boxedBoolean: kotlin.Boolean?
   if (true) {
    primitiveInt = 5
    boxedInt = (java.lang.Integer(10) as kotlin.Int)
    primitiveInt = (boxedInt!! as java.lang.Integer).intValue() - primitiveInt
    assert(primitiveInt === 5)
   }
   if (true) {
    primitiveInt = 5
    boxedInt = (java.lang.Integer(10) as kotlin.Int)
    boxedBoolean = java.lang.Boolean.valueOf(true)
    boxedBoolean = java.lang.Boolean.valueOf((boxedInt!! as java.lang.Integer).intValue() === primitiveInt)
    assert((boxedBoolean!! as java.lang.Boolean).booleanValue() === false)
   }
  }

  @kotlin.jvm.JvmStatic
  internal fun parenthesisRemoval() {
   (java.lang.Integer(1 + 2) as kotlin.Int)
  }
 }
}
