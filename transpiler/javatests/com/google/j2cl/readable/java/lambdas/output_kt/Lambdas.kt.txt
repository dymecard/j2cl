package lambdas

open class Lambdas {
 @kotlin.jvm.JvmField var field: Int = 100

 open fun call(intf: lambdas.Lambdas.FunctionalInterface?, n: Int): Int {
  return this.field + intf!!.m(n)
 }

 open fun testLambdaExpressionStyle() {
  this.call(lambdas.Lambdas.FunctionalInterface (fun(i: Int): Int {
   return i + 1
  }), 10)
 }

 open fun testLambdaBlockStyle() {
  this.call(lambdas.Lambdas.FunctionalInterface (fun(i: Int): Int {
   return i + 2
  }), 10)
 }

 open fun testLambdaCaptureField() {
  this.call(lambdas.Lambdas.FunctionalInterface (fun(i: Int): Int {
   return this.field + i + 1
  }), 10)
 }

 open fun testLambdaCaptureLocal() {
  val x: Int = 1
  this.call(lambdas.Lambdas.FunctionalInterface (fun(i: Int): Int {
   return x + i + 1
  }), 10)
 }

 open fun testLambdaCaptureFieldAndLocal() {
  val x: Int = 1
  this.call(lambdas.Lambdas.FunctionalInterface (fun(i: Int): Int {
   val y: Int = 1
   return x + y + this.field + i + 1
  }), 10)
 }

 open fun funOuter() {}

 open fun testLambdaCallOuterFunction() {
  this.call(lambdas.Lambdas.FunctionalInterface (fun(i: Int): Int {
   this.funOuter()
   this.funOuter()
   this@Lambdas.funOuter()
   return i + 2
  }), 10)
 }

 open fun <T> testInstanceMethodTypeVariableThroughLambda() {
  val wrapped: lambdas.Lambdas.Functional<T>? = lambdas.Lambdas.Functional<T> (fun(f: lambdas.Lambdas.Functional<T>?): lambdas.Lambdas.Functional<T>? {
   return object : Functional<T> {
    open override fun wrap(f: lambdas.Lambdas.Functional<T>?): lambdas.Lambdas.Functional<T>? {
     return null
    }
   }
  })
 }

 open fun <T> callWithTypeVariable(intf: lambdas.Lambdas.GenericFunctionalInterface<T>?, e: T?): T? {
  return intf!!.m(e)
 }

 open fun callParameterized(intf: lambdas.Lambdas.GenericFunctionalInterface<kotlin.Error?>?, e: kotlin.Error?): kotlin.Error? {
  return intf!!.m(e)
 }

 open fun <T> callWithBiFunction(fn: lambdas.Lambdas.BiFunction<T, kotlin.String?, kotlin.Double?>?): lambdas.Lambdas.GenericFunctionalInterface<T>? {
  return null
 }

 open fun <T: kotlin.Enum<T>?> testLambdaWithGenerics() {
  this.callWithTypeVariable(lambdas.Lambdas.GenericFunctionalInterface<kotlin.Error?> (fun(i: kotlin.Error?): kotlin.Error? {
   return i
  }), kotlin.Error())
  this.callParameterized(lambdas.Lambdas.GenericFunctionalInterface<kotlin.Error?> (fun(i_1: kotlin.Error?): kotlin.Error? {
   return i_1
  }), kotlin.Error())
  lambdas.Lambdas.callTypeVariableWithBounds(lambdas.Lambdas.GenericFunctionalInterface<kotlin.Enum<T>?> (fun(i_2: kotlin.Enum<T>?): kotlin.Enum<T>? {
   return i_2
  }), null as kotlin.Enum<T>?)
  this.callWithBiFunction(lambdas.Lambdas.BiFunction<kotlin.Any?, kotlin.String?, kotlin.Double?> (fun(x: kotlin.Any?, y: kotlin.String?): kotlin.Double? {
   throw kotlin.RuntimeException()
  }))
  val f: lambdas.Lambdas.Function<*, *>? = lambdas.Lambdas.Function<*, *> (fun(item: T?): kotlin.Any? {
   return java.lang.Long.valueOf(1L)
  })
 }

 open fun testLambdaReturningVoidAsExpression() {
  val runner: lambdas.Lambdas.FunctionalInterfaceWithMethodReturningVoid? = lambdas.Lambdas.FunctionalInterfaceWithMethodReturningVoid (fun() {
   (java.lang.Object() as kotlin.Any)
  })
 }

 open fun testAnonymousInsideLambda() {
  val runner: lambdas.Lambdas.FunctionalInterfaceWithMethodReturningVoid? = lambdas.Lambdas.FunctionalInterfaceWithMethodReturningVoid (fun() {
   (object : java.lang.Object() {} as kotlin.Any)
  })
 }

 open fun testDefaultMethodsInIntersectionAdaptor() {
  val o: kotlin.Any? = lambdas.Lambdas.BiFunction<kotlin.String?, kotlin.String?, kotlin.String?> (fun(t: kotlin.String?, u: kotlin.String?): kotlin.String? {
   return null
  }) as lambdas.Lambdas.BiFunction<kotlin.String?, kotlin.String?, kotlin.String?>? /* & lambdas.Lambdas.MarkerWithDefaultMethod? */
 }

 companion object {
  @kotlin.jvm.JvmStatic
  fun testLambdaInStaticContext() {
   val f: lambdas.Lambdas.FunctionalInterface? = lambdas.Lambdas.FunctionalInterface (fun(i: Int): Int {
    return i
   })
  }

  @kotlin.jvm.JvmStatic
  fun <T> testStaticMethodTypeVariableThroughLambda() {
   val wrapped: lambdas.Lambdas.Functional<T>? = lambdas.Lambdas.Functional<T> (fun(f: lambdas.Lambdas.Functional<T>?): lambdas.Lambdas.Functional<T>? {
    return object : lambdas.Lambdas.Functional<T> {
     open override fun wrap(f: lambdas.Lambdas.Functional<T>?): lambdas.Lambdas.Functional<T>? {
      return null
     }
    }
   })
  }

  @kotlin.jvm.JvmStatic
  fun <T: kotlin.Enum<T>?> callTypeVariableWithBounds(intf: lambdas.Lambdas.GenericFunctionalInterface<kotlin.Enum<T>?>?, e: kotlin.Enum<T>?): kotlin.Enum<T>? {
   return intf!!.m(e)
  }

  @kotlin.jvm.JvmStatic
  fun m(): kotlin.Any? {
   return null
  }

  @kotlin.jvm.JvmStatic
  fun testLambdaCallingStaticMethod() {
   val f: lambdas.Lambdas.Function<kotlin.Any?, *>? = lambdas.Lambdas.Function<kotlin.Any?, *> (fun(l: kotlin.Any?): kotlin.Any? {
    return lambdas.Lambdas.m()
   })
  }

  @kotlin.jvm.JvmField var identityFunction: lambdas.Lambdas.IdentityFunction? = null

  @kotlin.jvm.JvmStatic
  fun <E> identity(): lambdas.Lambdas.GenericJsFunction<E, E>? {
   if (lambdas.Lambdas.identityFunction === null) {
    lambdas.Lambdas.identityFunction = lambdas.Lambdas.IdentityFunction()
   }
   return lambdas.Lambdas.identityFunction as lambdas.Lambdas.GenericJsFunction<E, E>?
  }

  @kotlin.jvm.JvmStatic
  fun testJsInteropLambdas() {
   val thenable: lambdas.Lambdas.Thenable<kotlin.String?>? = lambdas.Lambdas.Thenable<kotlin.String?> (fun(f1: lambdas.Lambdas.GenericJsFunction<kotlin.Unit?, kotlin.String?>?, f2: lambdas.Lambdas.GenericJsFunction<kotlin.Unit?, kotlin.Throwable?>?) {
    f1!!.apply(null)
   })
   val otherThenable: lambdas.Lambdas.AnotherThenable<kotlin.String?>? = lambdas.Lambdas.AnotherThenable<kotlin.String?> (fun(f1_1: lambdas.Lambdas.GenericJsFunction<kotlin.Unit?, kotlin.String?>?, f2_1: lambdas.Lambdas.GenericJsFunction<kotlin.Unit?, kotlin.Throwable?>?) {
    f1_1!!.apply(null)
   })
   val stringJsSupplier: lambdas.Lambdas.JsSupplier<kotlin.Int?>? = lambdas.Lambdas.JsSupplier<kotlin.Int?> (fun(): kotlin.Int? {
    return java.lang.Integer.valueOf(1)
   })
   stringJsSupplier!!.get()
   val equals: lambdas.Lambdas.Equals<*>? = stringJsSupplier
   equals!!.equals(null)
   equals!!.get()
  }

  @kotlin.jvm.JvmStatic
  fun <U, V> testIntersectionTyping() {
   var o: kotlin.Any? = lambdas.Lambdas.GenericFunctionalInterface<kotlin.String?> (fun(x: kotlin.String?): kotlin.String? {
    return x
   }) as lambdas.Lambdas.GenericFunctionalInterface<kotlin.String?>? /* & lambdas.Lambdas.JustADefaultT<kotlin.Number?>? */
   o = lambdas.Lambdas.GenericFunctionalInterface<kotlin.String?> (fun(x_1: kotlin.String?): kotlin.String? {
    return x_1
   }) as lambdas.Lambdas.GenericFunctionalInterface<kotlin.String?>? /* & lambdas.Lambdas.JustADefaultS<kotlin.Number?>? */
   o = lambdas.Lambdas.GenericFunctionalInterface<U> (fun(x_2: U?): U? {
    return x_2
   }) as lambdas.Lambdas.GenericFunctionalInterface<U>? /* & lambdas.Lambdas.JustADefaultS<V>? */
  }
 }

 fun interface FunctionalInterface {
  fun m(i: Int): Int
 }

 fun interface Functional<T> {
  fun wrap(f: lambdas.Lambdas.Functional<T>?): lambdas.Lambdas.Functional<T>?
 }

 fun interface GenericFunctionalInterface<T> {
  fun m(i: T?): T?
 }

 fun interface BiFunction<T, U, R> {
  fun apply(t: T?, u: U?): R?

  fun <V> andThen(after: lambdas.Lambdas.Function<*, *>?): lambdas.Lambdas.BiFunction<T, U, V>? {
   return lambdas.Lambdas.BiFunction<T, U, V> (fun(t: T?, u: U?): V? {
    return after!!.apply(this.apply(t, u))
   })
  }
 }

 fun interface Function<T, R> {
  fun apply(t: T?): R?

  companion object {
   @kotlin.jvm.JvmStatic
   fun <T> identity(): lambdas.Lambdas.Function<T, T>? {
    return lambdas.Lambdas.Function<T, T> (fun(t: T?): T? {
     return t
    })
   }
  }
 }

 fun interface FunctionalInterfaceWithMethodReturningVoid {
  fun run()
 }

 open class Parent {
  @kotlin.jvm.JvmField var fieldInParent: Int = 0

  open fun funInParent() {}
 }

 open class LambdaInSubClass: lambdas.Lambdas.Parent() {
  open fun testLambdaInSubclass() {
   val l: lambdas.Lambdas.FunctionalInterface? = lambdas.Lambdas.FunctionalInterface (fun(i: Int): Int {
    this.funInParent()
    this.funInParent()
    this@LambdaInSubClass.funInParent()
    var a: Int = this.fieldInParent
    a = this.fieldInParent
    a = this@LambdaInSubClass.fieldInParent
    return a
   })
  }
 }

 fun interface GenericJsFunction<R, T> {
  fun apply(t: T?): R?
 }

 fun interface Thenable<T> {
  external fun then(f1: lambdas.Lambdas.GenericJsFunction<kotlin.Unit?, T>?, f2: lambdas.Lambdas.GenericJsFunction<kotlin.Unit?, kotlin.Throwable?>?)
 }

 fun interface AnotherThenable<T> {
  external fun then(f1: lambdas.Lambdas.GenericJsFunction<kotlin.Unit?, T>?, f2: lambdas.Lambdas.GenericJsFunction<kotlin.Unit?, kotlin.Throwable?>?)
 }

 class IdentityFunction: lambdas.Lambdas.GenericJsFunction<kotlin.Any?, kotlin.Any?> {
  open override fun apply(o: kotlin.Any?): kotlin.Any? {
   return o
  }
 }

 interface Equals<T> {
  fun equals(o: kotlin.Any?): Boolean

  fun get(): T? {
   return null
  }
 }

 fun interface JsSupplier<T: kotlin.Number?>: lambdas.Lambdas.Equals<T> {
  override fun get(): T?
 }

 interface JustADefaultT<T> {
  fun method(t: T?) {}
 }

 interface JustADefaultS<S> {
  fun method(t: S?) {}
 }

 interface MarkerWithDefaultMethod {
  fun defaultMethod() {}
 }
}
