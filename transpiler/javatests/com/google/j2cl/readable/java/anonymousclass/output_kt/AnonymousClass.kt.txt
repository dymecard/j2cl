package anonymousclass

abstract class SomeClass {
 abstract open fun foo(): kotlin.String?

 constructor(i: Int)
}

open class AnonymousClass {
 open fun main() {
  val instance: anonymousclass.SomeClass? = object : SomeClass(1) {
   @kotlin.jvm.JvmField var `object`: kotlin.Any? = this

   @kotlin.jvm.JvmField var outer: kotlin.Any? = this@AnonymousClass

   open override fun foo(): kotlin.String? {
    return "a"
   }
  }
 }
}

interface SomeInterface {
 companion object {
  @kotlin.jvm.JvmField val implicitlyStatic: anonymousclass.SomeClass? = object : anonymousclass.SomeClass(1) {
   open override fun foo(): kotlin.String? {
    return "a"
   }
  }
 }
}
