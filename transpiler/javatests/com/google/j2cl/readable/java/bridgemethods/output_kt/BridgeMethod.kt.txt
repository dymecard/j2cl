package bridgemethods

interface SomeInterface<T, S> {
 fun foo(t: T?, s: S?)

 fun foo(t: T?, n: kotlin.Number?)
}

open class SuperParent<T, S> {
 open fun foo(t: T?, s: S?) {}
}

open class Parent<T: kotlin.Error?>: bridgemethods.SuperParent<T, kotlin.Number?>() {
 open override fun foo(t: T?, s: kotlin.Number?) {}

 open fun <T_1: kotlin.Number?> bar(t: T_1?) {}

 open fun <T_1> `fun`(t: T_1?) {}
}

open class BridgeMethod: bridgemethods.SomeInterface<kotlin.AssertionError?, kotlin.Number?>, bridgemethods.Parent<kotlin.AssertionError?>() {
 open override fun foo(a: kotlin.AssertionError?, n: kotlin.Number?) {}

 open override fun bar(t: kotlin.Number?) {}

 open fun `fun`(t: kotlin.Number?) {}
}

fun interface SomeOtherFooInterface<T> {
 fun foo(t: T?, s: kotlin.Double?)
}

open class DualUnrelatedBridges: bridgemethods.SomeInterface<kotlin.String?, kotlin.Double?>, bridgemethods.SomeOtherFooInterface<kotlin.String?> {
 open override fun foo(s: kotlin.String?, n: kotlin.Double?) {}

 open override fun foo(s: kotlin.String?, n: kotlin.Number?) {}
}

open class SuperDualUnrelatedAccidentalBridges {
 open fun foo(s: kotlin.String?, n: kotlin.Double?) {}

 open fun foo(s: kotlin.String?, n: kotlin.Number?) {}
}

open class DualUnrelatedAccidentalBridges: bridgemethods.SomeInterface<kotlin.String?, kotlin.Double?>, bridgemethods.SomeOtherFooInterface<kotlin.String?>, bridgemethods.SuperDualUnrelatedAccidentalBridges() {}

fun interface Getter {
 fun get(s: kotlin.String?): kotlin.String?
}

open class ClassWithParameterizedGet<T> {
 open fun get(t: T?): T? {
  return null
 }
}

open class AccidentalOverrideBridge: bridgemethods.Getter, bridgemethods.ClassWithParameterizedGet<kotlin.String?>() {
 open fun test() {
  val g: bridgemethods.Getter? = bridgemethods.AccidentalOverrideBridge()
  g!!.get("")
 }
}

open class TestCase10036 {
 interface BI3 {
  fun get(value: kotlin.String?): kotlin.String? {
   return "BI3 get String"
  }
 }

 fun interface BI2 {
  fun get(value: kotlin.String?): kotlin.String?
 }

 fun interface BI1: bridgemethods.TestCase10036.BI3 {
  override fun get(value: kotlin.String?): kotlin.String?
 }

 abstract class B<B1: kotlin.Comparable<*>?>: bridgemethods.TestCase10036.BI1, bridgemethods.TestCase10036.BI2 {
  abstract open fun get(value: B1?): kotlin.String?
 }
}

open class TestCase102 {
 fun interface BI2 {
  fun set(value: kotlin.String?)
 }

 fun interface BI1 {
  fun set(value: kotlin.String?)
 }

 abstract class B<B1>: bridgemethods.TestCase102.BI1, bridgemethods.TestCase102.BI2 {
  abstract open fun set(value: B1?)
 }

 open inner class C<B1>: bridgemethods.TestCase102.B<B1>() {
  open override fun set(value: kotlin.String?) {}

  open override fun set(value: B1?) {}
 }
}

open class ParameterizedParent<T: bridgemethods.ParameterizedParent<T>?> {
 open fun <Q: T> m(t: Q?): Q? {
  return null
 }
}

open class ReparametrerizedChild<E: bridgemethods.ReparametrerizedChild<E>?>: bridgemethods.ParameterizedParent<E>() {
 open fun <S: E> m(t: S?): S? {
  return null
 }
}

open class LeafChild: bridgemethods.ReparametrerizedChild<bridgemethods.LeafChild?>() {}
