package foreachstatement

open class ForEachStatement {
 open fun test(iterable: kotlin.collections.MutableIterable<kotlin.Throwable?>?) {
  FOR_EACH@ for (t in iterable!!) {
   (t!! as java.lang.Throwable).toString()
  }
  FOR_EACH_1@ for (t_1 in arrayOfNulls<kotlin.Throwable?>(10)!!) {
   (t_1!! as java.lang.Throwable).toString()
  }
 }

 internal fun testMulticatch() {
  try {
   throw kotlin.Exception()
  } catch (e: foreachstatement.ForEachStatement.Exception1) {
   FOR_EACH@ for (o in e) {}
  } catch (e: foreachstatement.ForEachStatement.Exception2) {
   FOR_EACH@ for (o in e) {}
  }
 }

 internal fun <T, U: T> testTypeVariable() where T: kotlin.Any?, T: kotlin.collections.MutableIterable<kotlin.String?>? {
  val iterable: U? = null
  FOR_EACH@ for (s in iterable) {}
  val anotherIterable: foreachstatement.ForEachStatement.IterableReturningTypeVariable<*>? = null
  FOR_EACH_1@ for (s_1 in anotherIterable!!) {}
 }

 open class Exception1: kotlin.collections.MutableIterable<kotlin.String?>, kotlin.Exception() {
  open override fun iterator(): kotlin.collections.MutableIterator<kotlin.String?>? {
   return null
  }
 }

 open class Exception2: kotlin.collections.MutableIterable<kotlin.Any?>, kotlin.Exception() {
  open override fun iterator(): kotlin.collections.MutableIterator<kotlin.Any?>? {
   return null
  }
 }

 open class IterableReturningTypeVariable<T: kotlin.collections.MutableIterator<kotlin.Int?>?>: kotlin.collections.MutableIterable<kotlin.Int?> {
  open override fun iterator(): T? {
   return null
  }
 }
}
