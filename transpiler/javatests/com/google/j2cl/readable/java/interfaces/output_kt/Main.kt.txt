package interfaces

open class Main {
 open fun testInterfaceMembers() {
  val i: interfaces.Main.Interface<*>? = Implementor()
  i!!.interfaceMethod()
  i!!.defaultMethod(null)
  interfaces.Main.Interface.staticInterfaceMethod()
  val x: Int = run {
   Implementor()
   interfaces.Main.Interface.a
  } + interfaces.Main.Interface.b
 }

 fun interface Interface<T> {
  fun interfaceMethod()

  fun defaultMethod(t: T?) {
   this.privateMethod(t)
  }

  fun privateMethod(t: T?) {}

  companion object {
   @kotlin.jvm.JvmField val a: Int = 1

   @kotlin.jvm.JvmField val b: Int = 2

   @kotlin.jvm.JvmStatic
   fun staticInterfaceMethod() {}
  }
 }

 fun interface SubInterface: interfaces.Main.Interface<kotlin.String?> {
  override fun defaultMethod(s: kotlin.String?) {
   super.defaultMethod(s)
  }
 }

 open inner class Implementor: interfaces.Main.SubInterface, interfaces.Main.Interface<kotlin.String?> {
  open override fun interfaceMethod() {}
 }

 abstract inner class AbstractImplementor: interfaces.Main.SubInterface {}
}
