package nestedgenericclass

open class NestedGenericClass<T> {
 open fun <S> `fun`(t: S?) {
  open class `$1E`<S, S> {}
  open class `$1F`<S> {
   @kotlin.jvm.JvmField var f: S? = null
  }
  `$1E`<kotlin.Number?, S>()
  `$1F`<S>()
 }

 open fun <T_1> bar() {
  open class `$1G`<T, T_1> {
   open fun <T_1> bar() {
    open class `$1H`<T, T_1> {}
    `$1H`<kotlin.Number?, T_1>()
   }
  }
  `$1G`<kotlin.Error?, T_1>().bar()
 }

 open fun test() {
  val n: nestedgenericclass.NestedGenericClass<kotlin.Number?>? = nestedgenericclass.NestedGenericClass<kotlin.Number?>()
  val a: nestedgenericclass.NestedGenericClass<kotlin.Number?>.A<kotlin.Error?>? = n!!.A<kotlin.Error?>()
  val b: nestedgenericclass.NestedGenericClass<kotlin.Number?>.A<kotlin.Error?>.B<kotlin.Exception?>? = a!!.B<kotlin.Exception?>()
  n!!.C()
  n!!.C().D()
 }

 open inner class A<T> {
  open inner class B<T> {
   constructor()

   constructor(u: U?)
  }
 }

 open inner class C {
  @kotlin.jvm.JvmField var c: T? = null

  open inner class D {
   @kotlin.jvm.JvmField var d: T? = null
  }
 }
}
