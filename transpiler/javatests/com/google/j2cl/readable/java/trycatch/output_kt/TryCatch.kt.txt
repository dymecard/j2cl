package trycatch

open class TryCatch {
 open fun testMultiCatch() {
  try {
   throw kotlin.ClassCastException()
  } catch (e: kotlin.NullPointerException) {
   throw e!!
  } catch (e: kotlin.ClassCastException) {
   throw e!!
  } catch (r: kotlin.RuntimeException) {
   r = null
  }
 }

 open fun testEmptyThrowableCatch() {
  try {
   throw kotlin.ClassCastException()
  } catch (e: kotlin.Throwable) {}
  try {
   throw kotlin.ClassCastException()
  } catch (e_1: kotlin.Exception) {} catch (e_2: kotlin.Throwable) {}
 }

 open fun testEmptyThrowableRethrow() {
  try {
   throw kotlin.ClassCastException()
  } catch (e: kotlin.Throwable) {
   throw e!!
  }
 }

 open fun testFinally() {
  try {
   assert(true)
  } finally {}
 }

 open fun testTryWithResource() {
  (trycatch.TryCatch.ClosableThing()).use { thing: trycatch.TryCatch.ClosableThing? ->
   (trycatch.TryCatch.ClosableThing()).use { thing2: trycatch.TryCatch.ClosableThing? ->
    try {
     throw kotlin.Exception()
    } catch (e: kotlin.Exception) {}
   }
  }
 }

 open fun testTryWithResourceJava9() {
  val thing: trycatch.TryCatch.ClosableThing? = trycatch.TryCatch.ClosableThing()
  val thing2: trycatch.TryCatch.ClosableThing? = trycatch.TryCatch.ClosableThing()
  (thing).use { `$resource`: trycatch.TryCatch.ClosableThing? ->
   (thing2).use { `$resource_1`: trycatch.TryCatch.ClosableThing? ->
    try {
     throw kotlin.Exception()
    } catch (e: kotlin.Exception) {}
   }
  }
 }

 open fun testTryWithResouceOnStaticField() {
  (trycatch.TryCatch.closableThing).use { `$resource`: trycatch.TryCatch.ClosableThing? ->
   try {
    throw kotlin.Exception()
   } catch (e: kotlin.Exception) {}
  }
 }

 open fun testNestedTryCatch() {
  try {
   throw kotlin.Exception()
  } catch (ae: kotlin.Exception) {
   try {
    throw kotlin.Exception()
   } catch (ie: kotlin.Exception) {}
  }
 }

 open fun testThrowGenerics() {
  throw this.getT(kotlin.Exception())!!
 }

 internal fun <T> getT(t: T?): T? {
  return t
 }

 open fun testThrowBoundGenerics() {
  throw this.getThrowable()!!
 }

 internal fun <T: kotlin.Throwable?> getThrowable(): T? {
  return null
 }

 companion object {
  internal val closableThing: trycatch.TryCatch.ClosableThing? = trycatch.TryCatch.ClosableThing()
 }

 open class ClosableThing: java.lang.AutoCloseable {
  open override fun close() {}
 }
}
