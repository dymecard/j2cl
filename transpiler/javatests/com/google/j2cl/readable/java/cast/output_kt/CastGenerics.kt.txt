package cast

open class CastGenerics<T, E: kotlin.Number?> {
 @kotlin.jvm.JvmField internal var field: T? = null

 internal open fun method(): T? {
  return null
 }

 open fun testCastToTypeVariable() {
  val o: kotlin.Any? = (java.lang.Integer(1) as kotlin.Int)
  val e: E? = o as E?
  val t: T? = o as T?
  val es: Array<E>? = o as Array<E>?
  val ts: Array<T>? = o as Array<T>?
 }

 open fun <S, V: kotlin.Enum<V>?> testCastToMethodTypeVariable() {
  val o: kotlin.Any? = (java.lang.Integer(1) as kotlin.Int)
  val s: S? = o as S?
  var c: kotlin.Any? = o as cast.CastGenerics<S, kotlin.Number?>?
  c = o as Array<S>?
  c = o as V?
 }

 open fun <TT: kotlin.Enum<*>?> outerGenericMethod() {
  open class `$1Nested`<SS, TT: kotlin.Enum<*>?> {
   internal fun nestedGenericMethod(o: kotlin.Any?) {
    val t: TT? = o as TT?
   }
  }
 }

 open fun <EE> method(o: kotlin.Any?): EE? where EE: cast.CastGenerics.Empty1?, EE: cast.CastGenerics.Empty2<EE>? {
  if (o is cast.CastGenerics.Empty1) {
   return o as EE?
  }
  return null
 }

 companion object {
  @kotlin.jvm.JvmStatic
  fun <T_1, U: T_1> testErasureCast() where T_1: cast.CastGenerics.A?, T_1: cast.CastGenerics.B? {
   var str: kotlin.String? = cast.CastGenerics<kotlin.String?, kotlin.Number?>().field
   str = cast.CastGenerics<kotlin.String?, kotlin.Number?>().method()
   val containerT: cast.CastGenerics.Container<T_1>? = null
   containerT!!.get()!!.mA()
   containerT!!.get()!!.mB()
   val containerU: cast.CastGenerics.Container<U>? = null
   containerU!!.get()!!.mA()
   containerU!!.get()!!.mB()
   val containerArrT: cast.CastGenerics.Container<Array<T_1>?>? = null
   val arrT: Array<T_1>? = containerArrT!!.get()
   arrT!![0]!!.mA()
   arrT!![0]!!.mB()
   var arrA: Array<cast.CastGenerics.A?>? = containerArrT!!.get() as Array<cast.CastGenerics.A?>
   var arrB: Array<cast.CastGenerics.B?>? = containerArrT!!.get() as Array<cast.CastGenerics.B?>
   val containerArrU: cast.CastGenerics.Container<Array<U>?>? = null
   val arrU: Array<U>? = containerArrU!!.get()
   arrU!![0]!!.mA()
   arrU!![0]!!.mB()
   arrA = containerArrU!!.get() as Array<cast.CastGenerics.A?>
   arrB = containerArrU!!.get() as Array<cast.CastGenerics.B?>
   val containerBase: cast.CastGenerics.Container<cast.CastGenerics.BaseImplementor?>? = null
   containerBase!!.get()!!.mA()
   containerBase!!.get()!!.mB()
   val containerImplementor: cast.CastGenerics.Container<cast.CastGenerics.Implementor?>? = null
   containerImplementor!!.get()!!.mA()
   containerImplementor!!.get()!!.mB()
  }

  @kotlin.jvm.JvmStatic
  fun testCastToParamterizedType() {
   val o: kotlin.Any? = (java.lang.Integer(1) as kotlin.Int)
   var cc: cast.CastGenerics<kotlin.Error?, kotlin.Number?>? = o as cast.CastGenerics<kotlin.Error?, kotlin.Number?>?
   cc = o as cast.CastGenerics<*, *>?
  }

  @kotlin.jvm.JvmStatic
  fun <T_1> doSomething(): cast.CastGenerics.Foo<T_1>? {
   return object : cast.CastGenerics.Foo<T_1>() {}
  }
 }

 fun interface A {
  fun mA()
 }

 fun interface B {
  fun mB()
 }

 abstract class BaseImplementor: cast.CastGenerics.A, cast.CastGenerics.B {}

 open class Implementor: cast.CastGenerics.BaseImplementor() {
  open override fun mA() {}

  open override fun mB() {}
 }

 open class Container<T> {
  internal open fun get(): T? {
   return null
  }
 }

 interface Empty1 {}

 interface Empty2<TT> {}

 open class Foo<V> {}
}
