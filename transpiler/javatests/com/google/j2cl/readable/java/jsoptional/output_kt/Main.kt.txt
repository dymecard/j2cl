package jsoptional

open class Main {
 open fun method1(i1: Int, d: kotlin.Double?, i: kotlin.Int?) {}

 open fun method2(s1: kotlin.String?, d: kotlin.Double?, vararg i: kotlin.Boolean?) {}

 @kotlin.jvm.JvmField var f: jsoptional.Main.Function? = jsoptional.Main.Function (fun(s: kotlin.String?, varargs: Array<kotlin.Any?>?): kotlin.Any? {
  return s
 })

 constructor(a: kotlin.String?)

 open fun testFunction(f: jsoptional.Main.Function?) {}

 open fun testOptionalFunction(f: jsoptional.Main.Function?) {}

 fun interface Function {
  fun f1(s: kotlin.String?, vararg args: kotlin.Any?): kotlin.Any?
 }

 class AFunction: jsoptional.Main.Function {
  open override fun f1(i: kotlin.String?, vararg args: kotlin.Any?): kotlin.Any? {
   return args!![0]
  }
 }

 fun interface I<T> {
  fun m(t: T?, o: kotlin.Any?)
 }

 open class TemplatedSubtype<T: kotlin.String?>: jsoptional.Main.I<T> {
  open override fun m(t: T?, o: kotlin.Any?) {}
 }

 open inner class SpecializedSubtype: jsoptional.Main.I<kotlin.String?> {
  constructor(a: kotlin.Any?)

  open override fun m(t: kotlin.String?, o: kotlin.Any?) {}
 }

 open class NonJsTypeSubtype: jsoptional.Main.I<kotlin.String?> {
  open override fun m(t: kotlin.String?, o: kotlin.Any?) {}
 }
}
