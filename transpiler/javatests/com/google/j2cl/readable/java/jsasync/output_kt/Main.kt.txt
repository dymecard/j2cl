package jsasync

open class Main {
 internal val x: jsasync.Main.IThenable<kotlin.Int?>? = jsasync.Main.Promise.resolve(java.lang.Integer.valueOf(10))

 internal open fun emptyAsyncMethod(): jsasync.Main.IThenable<kotlin.Unit?>? {
  return null
 }

 internal open fun asyncMethod(): jsasync.Main.IThenable<kotlin.Int?>? {
  val result: Int = (jsasync.Main.await(jsasync.Main.Promise.resolve(java.lang.Integer.valueOf(7)))!! as java.lang.Integer).intValue()
  return this.parametricAsyncMethod(java.lang.Integer.valueOf(result))
 }

 internal open fun <T> parametricAsyncMethod(value: T?): jsasync.Main.IThenable<T>? {
  return jsasync.Main.Promise.resolve(jsasync.Main.await(jsasync.Main.Promise.resolve(value)))
 }

 internal open fun testAsyncLambdas() {
  val i: jsasync.Main.AsyncInterface? = jsasync.Main.AsyncInterface (fun(): jsasync.Main.IThenable<kotlin.Int?>? {
   return jsasync.Main.Promise.resolve(jsasync.Main.await(jsasync.Main.Promise.resolve(java.lang.Integer.valueOf(5))))
  })
  val o: jsasync.Main.BaseInterface? = object : BaseInterface {
   open override fun asyncCall(): jsasync.Main.IThenable<kotlin.Int?>? {
    return jsasync.Main.Promise.resolve(jsasync.Main.await(this@Main.x))
   }
  }
  val j: jsasync.Main.AsyncJsFunctionInterface? = jsasync.Main.AsyncJsFunctionInterface (fun(): jsasync.Main.IThenable<kotlin.Int?>? {
   return jsasync.Main.Promise.resolve(jsasync.Main.await(jsasync.Main.Promise.resolve(java.lang.Integer.valueOf(5))))
  })
  val optimizableJsFunction: jsasync.Main.JsFunctionInterface? = object : JsFunctionInterface {
   open override fun doSomething(): jsasync.Main.IThenable<kotlin.Int?>? {
    return jsasync.Main.Promise.resolve(java.lang.Integer.valueOf(5))
   }
  }
  val unoptimizableJsFunction: jsasync.Main.JsFunctionInterface? = object : JsFunctionInterface {
   open override fun doSomething(): jsasync.Main.IThenable<kotlin.Int?>? {
    val tmp: jsasync.Main.JsFunctionInterface? = this
    return jsasync.Main.Promise.resolve(jsasync.Main.await(this@Main.x))
   }
  }
 }

 companion object {
  @kotlin.jvm.JvmStatic
  internal fun staticAsyncMethod(): jsasync.Main.IThenable<kotlin.Unit?>? {
   return jsasync.Main.Promise.resolve(jsasync.Main.await(jsasync.Main.Promise.resolve(null as kotlin.Unit?)))
  }

  @kotlin.jvm.JvmStatic
  external internal fun <T> await(thenable: jsasync.Main.IThenable<T>?): T?
 }

 fun interface BaseInterface {
  fun asyncCall(): jsasync.Main.IThenable<kotlin.Int?>?
 }

 fun interface AsyncInterface: jsasync.Main.BaseInterface {
  override fun asyncCall(): jsasync.Main.IThenable<kotlin.Int?>?
 }

 interface InterfaceWithAsyncDefaultMethod {
  fun asyncCall(): jsasync.Main.IThenable<kotlin.Int?>? {
   return jsasync.Main.Promise.resolve(jsasync.Main.await(jsasync.Main.Promise.resolve(java.lang.Integer.valueOf(5))))
  }
 }

 fun interface JsFunctionInterface {
  fun doSomething(): jsasync.Main.IThenable<kotlin.Int?>?
 }

 fun interface AsyncJsFunctionInterface {
  fun doSomething(): jsasync.Main.IThenable<kotlin.Int?>?
 }

 interface IThenable<T> {}

 open class Promise<T>: jsasync.Main.IThenable<T> {
  companion object {
   @kotlin.jvm.JvmStatic
   external fun <T> resolve(value: T?): jsasync.Main.Promise<T>?
  }
 }
}
