package methodreferences

open class MethodReferences<T> {
 open fun isA(): kotlin.Boolean? {
  return java.lang.Boolean.valueOf(true)
 }

 open fun self(): kotlin.Any? {
  return this
 }

 open fun sameAs(n: kotlin.Number?): kotlin.Boolean? {
  return java.lang.Boolean.valueOf(false)
 }

 open fun main() {
  var objectFactory: methodreferences.MethodReferences.Producer<kotlin.Any?>? = methodreferences.MethodReferences.Producer<kotlin.Any?> (fun(): kotlin.Any? {
   return (java.lang.Object() as kotlin.Any)
  })
  objectFactory = methodreferences.MethodReferences.Producer<kotlin.Any?> (fun(): kotlin.Any? {
   return methodreferences.MethodReferences.m()
  })
  objectFactory = run {
   val `$$q`: methodreferences.MethodReferences<T> = methodreferences.MethodReferences<T>()
   methodreferences.MethodReferences.Producer<kotlin.Any?> (fun(): kotlin.Any? {
    return `$$q`.isA()
   })
  }
  val biFunction: methodreferences.MethodReferences.BiFunction<methodreferences.MethodReferences<T>?, kotlin.Number?, kotlin.Boolean?>? = methodreferences.MethodReferences.BiFunction<methodreferences.MethodReferences<T>?, kotlin.Number?, kotlin.Boolean?> (fun(arg0: methodreferences.MethodReferences<T>?, arg1: kotlin.Number?): kotlin.Boolean? {
   return arg0!!.sameAs(arg1)
  })
  val functionWithParameters: methodreferences.MethodReferences.Function<kotlin.Number?, kotlin.Boolean?>? = methodreferences.MethodReferences.Function<kotlin.Number?, kotlin.Boolean?> (fun(arg0_1: kotlin.Number?): kotlin.Boolean? {
   return this.sameAs(arg0_1)
  })
  val objectPredicate: methodreferences.MethodReferences.Predicate<methodreferences.MethodReferences<T>?>? = methodreferences.MethodReferences.Predicate<methodreferences.MethodReferences<T>?> (fun(arg0_2: methodreferences.MethodReferences<T>?): Boolean {
   return (arg0_2!!.isA()!! as java.lang.Boolean).booleanValue()
  })
  val objectCapturingOuterProducer: methodreferences.MethodReferences.Producer<methodreferences.MethodReferences<T>.ObjectCapturingOuter?>? = methodreferences.MethodReferences.Producer<methodreferences.MethodReferences<T>.ObjectCapturingOuter?> (fun(): methodreferences.MethodReferences<T>.ObjectCapturingOuter? {
   return ObjectCapturingOuter()
  })
  val arrayProducer: methodreferences.MethodReferences.ArrayProducer<kotlin.Any?>? = methodreferences.MethodReferences.ArrayProducer<kotlin.Any?> (fun(arg0_3: Int): Array<kotlin.Any?>? {
   return arrayOfNulls<kotlin.Double?>(arg0_3) as Array<kotlin.Any?>
  })
  objectFactory = run {
   val `$$q_1`: methodreferences.MethodReferences<kotlin.Any?> = methodreferences.MethodReferences<kotlin.Any?>()
   methodreferences.MethodReferences.Producer<kotlin.Any?> (fun(): kotlin.Any? {
    return `$$q_1`.self()
   })
  }
  val function: methodreferences.MethodReferences.Function<methodreferences.MethodReferences<T>?, kotlin.Any?>? = methodreferences.MethodReferences.Function<methodreferences.MethodReferences<T>?, kotlin.Any?> (fun(arg0_4: methodreferences.MethodReferences<T>?): kotlin.Any? {
   return arg0_4!!.self()
  })
  val arrayFactory: methodreferences.MethodReferences.Function<kotlin.Int?, Array<kotlin.Any?>?>? = methodreferences.MethodReferences.Function<kotlin.Int?, Array<kotlin.Any?>?> (fun(arg0_5: kotlin.Int?): Array<kotlin.Any?>? {
   return arrayOfNulls<kotlin.Any?>((arg0_5!! as java.lang.Integer).intValue())
  })
  val superToStringProducer: methodreferences.MethodReferences.Producer<kotlin.String?>? = methodreferences.MethodReferences.Producer<kotlin.String?> (fun(): kotlin.String? {
   return (this as java.lang.Object).toString()
  })
  var jsobjectFactory: methodreferences.MethodReferences.JsProducer<kotlin.Any?>? = methodreferences.MethodReferences.JsProducer<kotlin.Any?> (fun(): kotlin.Any? {
   return (java.lang.Object() as kotlin.Any)
  })
  jsobjectFactory = methodreferences.MethodReferences.JsProducer<kotlin.Any?> (fun(): kotlin.Any? {
   return methodreferences.MethodReferences.m()
  })
  jsobjectFactory = run {
   val `$$q_2`: methodreferences.MethodReferences<kotlin.Any?> = methodreferences.MethodReferences<kotlin.Any?>()
   methodreferences.MethodReferences.JsProducer<kotlin.Any?> (fun(): kotlin.Any? {
    return `$$q_2`.self()
   })
  }
  val jsfunction: methodreferences.MethodReferences.JsFunctionInterface<methodreferences.MethodReferences<T>?, kotlin.Any?>? = methodreferences.MethodReferences.JsFunctionInterface<methodreferences.MethodReferences<T>?, kotlin.Any?> (fun(arg0_6: methodreferences.MethodReferences<T>?): kotlin.Any? {
   return arg0_6!!.self()
  })
  val jsarrayFactory: methodreferences.MethodReferences.JsFunctionInterface<kotlin.Int?, Array<kotlin.Any?>?>? = methodreferences.MethodReferences.JsFunctionInterface<kotlin.Int?, Array<kotlin.Any?>?> (fun(arg0_7: kotlin.Int?): Array<kotlin.Any?>? {
   return arrayOfNulls<kotlin.Any?>((arg0_7!! as java.lang.Integer).intValue())
  })
  val jsSuperToStringProducer: methodreferences.MethodReferences.JsProducer<kotlin.String?>? = methodreferences.MethodReferences.JsProducer<kotlin.String?> (fun(): kotlin.String? {
   return (this as java.lang.Object).toString()
  })
  val jsbiFunction: methodreferences.MethodReferences.JsBiFunction<methodreferences.MethodReferences<T>?, kotlin.Number?, kotlin.Boolean?>? = methodreferences.MethodReferences.JsBiFunction<methodreferences.MethodReferences<T>?, kotlin.Number?, kotlin.Boolean?> (fun(arg0_8: methodreferences.MethodReferences<T>?, arg1_1: kotlin.Number?): kotlin.Boolean? {
   return arg0_8!!.sameAs(arg1_1)
  })
  val jsFunctionWithParameters: methodreferences.MethodReferences.JsFunctionInterface<kotlin.Number?, kotlin.Boolean?>? = methodreferences.MethodReferences.JsFunctionInterface<kotlin.Number?, kotlin.Boolean?> (fun(arg0_9: kotlin.Number?): kotlin.Boolean? {
   return this.sameAs(arg0_9)
  })
 }

 companion object {
  @kotlin.jvm.JvmStatic
  fun m(): kotlin.Any? {
   return (java.lang.Object() as kotlin.Any)
  }

  @kotlin.jvm.JvmField var staticStringProducer: methodreferences.MethodReferences.Producer<kotlin.String?>? = run {
   val `$$q`: kotlin.Any? = methodreferences.MethodReferences.m()
   methodreferences.MethodReferences.Producer<kotlin.String?> (fun(): kotlin.String? {
    return (`$$q`!! as java.lang.Object).toString()
   })
  }
 }

 fun interface Producer<T> {
  fun produce(): T?
 }

 fun interface Predicate<T> {
  fun apply(parameter: T?): Boolean
 }

 fun interface ArrayProducer<T> {
  fun produce(size: Int): Array<T>?
 }

 open inner class ObjectCapturingOuter {
  open fun getMain(): methodreferences.MethodReferences<T>? {
   return this@MethodReferences
  }
 }

 fun interface Function<T, U> {
  fun apply(t: T?): U?
 }

 fun interface BiFunction<T, U, V> {
  fun apply(t: T?, u: U?): V?
 }

 fun interface JsProducer<T> {
  fun produce(): T?
 }

 fun interface JsFunctionInterface<T, U> {
  fun apply(t: T?): U?
 }

 fun interface JsBiFunction<T, U, V> {
  fun apply(t: T?, u: U?): V?
 }
}
