package bridgejsmethod

open class Main {
 companion object {
  @kotlin.jvm.JvmStatic
  fun test() {
   val a: bridgejsmethod.Main.A<*>? = bridgejsmethod.Main.A<kotlin.Int?>()
   a!!.`fun`(java.lang.Integer.valueOf(1))
   a!!.bar(java.lang.Integer.valueOf(1))
   val b: bridgejsmethod.Main.B? = bridgejsmethod.Main.B()
   b!!.`fun`("abc")
   b!!.bar("abc")
   val c: bridgejsmethod.Main.C? = bridgejsmethod.Main.C()
   c!!.`fun`(java.lang.Integer.valueOf(1))
   c!!.bar(java.lang.Integer.valueOf(1))
   val d: bridgejsmethod.Main.D? = bridgejsmethod.Main.D()
   d!!.`fun`(java.lang.Integer.valueOf(1))
   d!!.bar(java.lang.Integer.valueOf(1))
   val e: bridgejsmethod.Main.E? = bridgejsmethod.Main.E()
   e!!.`fun`("abc")
   e!!.bar("abc")
   val h: bridgejsmethod.Main.H<kotlin.Int?>? = bridgejsmethod.Main.H<kotlin.Int?>()
   h!!.enclose(java.lang.Integer.valueOf(1))
   val l: bridgejsmethod.Main.L<kotlin.Int?>? = bridgejsmethod.Main.L<kotlin.Int?>()
   l!!.`fun`("foo", java.lang.Integer.valueOf(1))
  }
 }

 open class A<T> {
  open fun `fun`(t: T?): T? {
   return t
  }

  open fun bar(t: T?) {}
 }

 fun interface I<T: kotlin.Number?> {
  fun `fun`(t: T?): T?
 }

 fun interface J<T> {
  fun bar(t: T?)
 }

 open class B: bridgejsmethod.Main.A<kotlin.String?>() {
  open override fun `fun`(s: kotlin.String?): kotlin.String? {
   return s
  }

  open override fun bar(s: kotlin.String?) {}
 }

 open class C: bridgejsmethod.Main.A<kotlin.Int?>() {
  open override fun `fun`(i: kotlin.Int?): kotlin.Int? {
   return i
  }
 }

 open class D: bridgejsmethod.Main.I<kotlin.Int?>, bridgejsmethod.Main.A<kotlin.Int?>() {
  open override fun `fun`(i: kotlin.Int?): kotlin.Int? {
   return i
  }
 }

 open class E: bridgejsmethod.Main.J<kotlin.String?>, bridgejsmethod.Main.B() {}

 open class F: bridgejsmethod.Main.I<kotlin.Int?>, bridgejsmethod.Main.A<kotlin.Int?>() {}

 fun interface G<V> {
  fun enclose(value: V?): V?
 }

 open class H<V>: bridgejsmethod.Main.G<V> {
  open override fun enclose(value: V?): V? {
   return null
  }
 }

 open class K<K1, K2> {
  internal open fun `fun`(k1: K1?, k2: K2?) {}
 }

 open class L<L1>: bridgejsmethod.Main.K<kotlin.String?, L1>() {
  internal open override fun `fun`(string: kotlin.String?, l1: L1?) {}
 }

 fun interface M {
  fun getB(): bridgejsmethod.Main.B?
 }

 abstract inner class N: bridgejsmethod.Main.M {
  internal constructor()

  abstract open override fun getB(): bridgejsmethod.Main.B?
 }

 open inner class O: bridgejsmethod.Main.N() {
  internal var b: bridgejsmethod.Main.B? = null

  open override fun getB(): bridgejsmethod.Main.B? {
   return this.b
  }
 }

 fun interface P {
  fun getKey(): kotlin.String?
 }

 abstract inner class Q: bridgejsmethod.Main.P {
  abstract open override fun getKey(): kotlin.String?
 }

 abstract inner class R: bridgejsmethod.Main.Q() {
  open override fun getKey(): kotlin.String? {
   return null
  }
 }

 open inner class S: bridgejsmethod.Main.R() {}

 open inner class GrandParent<T> {
  open fun jsMethod(t: T?) {}

  open fun method(t: T?) {}
 }

 open inner class Parent<T: bridgejsmethod.Main.Parent<T>?>: bridgejsmethod.Main.GrandParent<T>() {
  open override fun jsMethod(t: T?) {}

  open override fun method(t: T?) {}
 }

 open inner class Child: bridgejsmethod.Main.Parent<bridgejsmethod.Main.Child?>() {}
}
