package innerclassinitorder

open class InnerClassInitOrder {
 @kotlin.jvm.JvmField var number: Int = 0

 open fun testOuterThisFromSuperCall() {
  OuterRefFromSuperCtorCall()
  assert(this.number === 100)
 }

 open fun testOuterThisFromThisCall() {
  OuterRefFromThisCtorCall()
  assert(this.number === 1100)
 }

 open fun testExtendsNested() {
  val o: innerclassinitorder.InnerClassInitOrder.ESOuter? = innerclassinitorder.InnerClassInitOrder.ESOuter()
  assert(1 === o!!.ESInner().value)
  assert(2 === o!!.ESInner(2).value)
  assert(1 === innerclassinitorder.InnerClassInitOrder.ESInnerSubclass(o).value)
  assert(2 === innerclassinitorder.InnerClassInitOrder.ESInnerSubclass(2, o).value)
 }

 open fun testExtendsNestedWithGenerics() {
  val o: innerclassinitorder.InnerClassInitOrder.ESWGOuter<kotlin.String?>? = innerclassinitorder.InnerClassInitOrder.ESWGOuter<kotlin.String?>()
  assert(1 === o!!.ESWGInner().value)
  assert(2 === o!!.ESWGInner(2).value)
  assert(1 === innerclassinitorder.InnerClassInitOrder.ESWGInnerSubclass(o).value)
  assert(2 === innerclassinitorder.InnerClassInitOrder.ESWGInnerSubclass(2, o).value)
 }

 open fun testInnerClassCtors() {
  val p1: innerclassinitorder.InnerClassInitOrder.P1<*>? = innerclassinitorder.InnerClassInitOrder.P1<kotlin.Any?>()
  assert(1 === p1!!.value)
  assert(2 === innerclassinitorder.InnerClassInitOrder.P1<kotlin.Any?>(2).value)
  val p2: innerclassinitorder.InnerClassInitOrder.P1<*>.P2<*>? = p1!!.P2<kotlin.Any?>()
  assert(1 === p2!!.value)
  assert(2 === p1!!.P2<kotlin.Any?>(2).value)
  assert(1 === p2!!.P3<kotlin.Any?>().value)
  assert(2 === p2!!.P3<kotlin.Any?>(2).value)
 }

 open fun testInnerClassInitialization() {
  InnerClass()
  assert(this.number === 1111)
 }

 open fun testInnerClassLoop() {
  abstract class `$1AddNumber` {
   @kotlin.jvm.JvmField internal var num: Int = 0

   constructor(i: Int) {
    this.num = i
   }

   abstract open fun act()
  }
  val results: Array<`$1AddNumber`?>? = arrayOfNulls<`$1AddNumber`?>(10)
  if (true) {
   var i: Int = 0
   LOOP@ while (i < 10) {
    LOOP_CONTINUE@ do {
     val ap: `$1AddNumber`? = object : `$1AddNumber`(i) {
      open override fun act() {
       this@InnerClassInitOrder.number = this@InnerClassInitOrder.number + this.num
      }
     }
     results!![i] = ap
    } while (false)
    i = i + 1
   }
  }
  FOR_EACH@ for (theAp in results!!) {
   theAp!!.act()
  }
  assert(this.number === 1156)
 }

 internal val outer: innerclassinitorder.InnerClassInitOrder.Outer? = innerclassinitorder.InnerClassInitOrder.Outer(1)

 internal val outerIsSuper: innerclassinitorder.InnerClassInitOrder.Outer.OuterIsSuper? = this.outer!!.OuterIsSuper(2)

 open fun testOuterIsNotSuper() {
  val x: innerclassinitorder.InnerClassInitOrder.Outer.OuterIsNotSuper? = this.outerIsSuper!!.OuterIsNotSuper()
  assert(2 === x!!.getValue())
 }

 open fun testOuterIsNotSuperAnon() {
  val x: innerclassinitorder.InnerClassInitOrder.Outer.OuterIsNotSuper? = object : OuterIsNotSuper() {}
  assert(2 === x!!.getValue())
 }

 open fun testQualifiedSuperCall() {
  val x: innerclassinitorder.InnerClassInitOrder.Outer.TestQualifiedSuperCall? = innerclassinitorder.InnerClassInitOrder.Outer.TestQualifiedSuperCall()
  assert(2 === x!!.getValue())
 }

 open fun testQualifiedSuperCallAnon() {
  val x: innerclassinitorder.InnerClassInitOrder.Outer.TestQualifiedSuperCall? = object : TestQualifiedSuperCall() {}
  assert(2 === x!!.getValue())
 }

 open fun testSuperDispatch() {
  assert(1 === this.outerIsSuper!!.checkDispatchFromSub1())
  assert(1 === this.outerIsSuper!!.checkDispatchFromSub2())
 }

 open fun testUnqualifiedAlloc() {
  val x: innerclassinitorder.InnerClassInitOrder.Outer.OuterIsNotSuper? = this.outerIsSuper!!.unqualifiedAlloc()
  assert(2 === x!!.getValue())
 }

 open fun testUnqualifiedSuperCall() {
  val x: innerclassinitorder.InnerClassInitOrder.Outer.TestUnqualifiedSuperCall? = this.outerIsSuper!!.TestUnqualifiedSuperCall()
  assert(2 === x!!.getValue())
 }

 open fun testUnqualifiedSuperCallAnon() {
  val x: innerclassinitorder.InnerClassInitOrder.Outer.TestUnqualifiedSuperCall? = object : TestUnqualifiedSuperCall() {}
  assert(2 === x!!.getValue())
 }

 companion object {
  @kotlin.jvm.JvmStatic
  fun main(vararg args: kotlin.String?) {
   val m: innerclassinitorder.InnerClassInitOrder? = innerclassinitorder.InnerClassInitOrder()
   m!!.testOuterThisFromSuperCall()
   m!!.testOuterThisFromThisCall()
   m!!.testExtendsNested()
   m!!.testExtendsNestedWithGenerics()
   m!!.testInnerClassCtors()
   m!!.testInnerClassInitialization()
   m!!.testInnerClassLoop()
   m!!.testOuterIsNotSuper()
   m!!.testOuterIsNotSuperAnon()
   m!!.testQualifiedSuperCall()
   m!!.testQualifiedSuperCallAnon()
   m!!.testSuperDispatch()
   m!!.testUnqualifiedAlloc()
   m!!.testUnqualifiedSuperCall()
   m!!.testUnqualifiedSuperCallAnon()
  }
 }

 open class OuterRefFromSuperCtorBase {
  internal constructor(o: kotlin.Any?) {
   (o!! as java.lang.Object).toString()
  }
 }

 open inner class OuterRefFromSuperCtorCall: innerclassinitorder.InnerClassInitOrder.OuterRefFromSuperCtorBase {
  internal constructor(): super((object : java.lang.Object() {
   open override fun toString(): kotlin.String? {
    this@InnerClassInitOrder.number = this@InnerClassInitOrder.number + 100
    return ""
   }
  } as kotlin.Any))
 }

 open inner class OuterRefFromThisCtorCall: innerclassinitorder.InnerClassInitOrder.OuterRefFromSuperCtorBase {
  constructor(`object`: kotlin.Any?): super(`object`)

  constructor(): this((object : java.lang.Object() {
   open override fun toString(): kotlin.String? {
    this@InnerClassInitOrder.number = this@InnerClassInitOrder.number + 1000
    return ""
   }
  } as kotlin.Any))
 }

 open inner class InnerClass {
  init {
   this.callInner()
  }

  internal open fun callInner() {
   this@InnerClassInitOrder.number = this@InnerClassInitOrder.number + 1
   open class `$1ReallyInnerClass` {
    init {
     this.callReallyInner()
    }

    internal open fun callReallyInner() {
     this@InnerClassInitOrder.number = this@InnerClassInitOrder.number + 10
    }
   }
   `$1ReallyInnerClass`()
  }
 }

 open class P1<T1> {
  @kotlin.jvm.JvmField internal val value: Int

  internal constructor(): this(1)

  internal constructor(i: Int) {
   this.value = i
  }

  open inner class P2<T2>: innerclassinitorder.InnerClassInitOrder.P1<T1> {
   internal constructor(): this(1)

   internal constructor(i: Int): super(i)

   open inner class P3<T3>: innerclassinitorder.InnerClassInitOrder.P1<T1>.P2<T2> {
    internal constructor(): this(1)

    internal constructor(i: Int): super(i)
   }
  }
 }

 open class ESOuter {
  open fun newESInner(): innerclassinitorder.InnerClassInitOrder.ESOuter.ESInner? {
   return ESInner()
  }

  open inner class ESInner {
   @kotlin.jvm.JvmField var value: Int = 0

   constructor() {
    this.value = 1
   }

   constructor(value: Int) {
    this.value = value
   }
  }
 }

 open class ESInnerSubclass: innerclassinitorder.InnerClassInitOrder.ESOuter.ESInner {
  internal constructor(outer: innerclassinitorder.InnerClassInitOrder.ESOuter?): super()

  internal constructor(value: Int, outer: innerclassinitorder.InnerClassInitOrder.ESOuter?): super(value)
 }

 open class ESWGOuter<T> {
  open fun newESWGInner(): innerclassinitorder.InnerClassInitOrder.ESWGOuter<T>.ESWGInner? {
   return ESWGInner()
  }

  open inner class ESWGInner {
   @kotlin.jvm.JvmField var value: Int = 0

   constructor() {
    this.value = 1
   }

   constructor(value: Int) {
    this.value = value
   }
  }
 }

 open class ESWGInnerSubclass: innerclassinitorder.InnerClassInitOrder.ESWGOuter<kotlin.String?>.ESWGInner {
  internal constructor(outer: innerclassinitorder.InnerClassInitOrder.ESWGOuter<kotlin.String?>?): super()

  internal constructor(value: Int, outer: innerclassinitorder.InnerClassInitOrder.ESWGOuter<kotlin.String?>?): super(value)
 }

 open class Outer {
  @kotlin.jvm.JvmField protected val value: Int

  constructor(i: Int) {
   this.value = i
  }

  open fun checkDispatch(): Int {
   return 1
  }

  open inner class OuterIsNotSuper {
   open fun getValue(): Int {
    return this@Outer.value
   }
  }

  open inner class OuterIsSuper: innerclassinitorder.InnerClassInitOrder.Outer {
   constructor(i: Int): super(i)

   open override fun checkDispatch(): Int {
    return 2
   }

   open fun checkDispatchFromSub1(): Int {
    return super.checkDispatch()
   }

   open fun checkDispatchFromSub2(): Int {
    return object : Outer(1) {
     open fun go(): Int {
      return this@OuterIsSuper.checkDispatch()
     }
    }.go()
   }

   open fun unqualifiedAlloc(): innerclassinitorder.InnerClassInitOrder.Outer.OuterIsNotSuper? {
    return OuterIsNotSuper()
   }
  }

  open class TestQualifiedSuperCall: innerclassinitorder.InnerClassInitOrder.Outer.OuterIsNotSuper {
   constructor(): super()
  }

  open inner class TestUnqualifiedSuperCall: innerclassinitorder.InnerClassInitOrder.Outer.OuterIsNotSuper {
   constructor(): super()
  }
 }
}
