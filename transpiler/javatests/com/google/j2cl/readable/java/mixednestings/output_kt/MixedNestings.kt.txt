package mixednestings

fun interface MyInterface {
 fun `fun`(a: Int): Int
}

open class MixedNestings {
 open fun mm() {}

 open fun test() {
  A().a()
 }

 open inner class A {
  open fun aa() {}

  open fun a() {
   open class `$1B` {
    open fun bb() {}

    open fun b(): Int {
     val i: mixednestings.MyInterface? = object : MyInterface {
      open override fun `fun`(a: Int): Int {
       val ii: mixednestings.MyInterface? = mixednestings.MyInterface (fun(n: Int): Int {
        this@MixedNestings.mm()
        this@A.aa()
        this@`$1B`.bb()
        val iii: mixednestings.MyInterface? = mixednestings.MyInterface (fun(m: Int): Int {
         this@MixedNestings.mm()
         this@A.aa()
         this@`$1B`.bb()
         return object : MyInterface {
          open override fun `fun`(b: Int): Int {
           return b
          }
         }.`fun`(100)
        })
        return iii!!.`fun`(200)
       })
       return ii!!.`fun`(300)
      }
     }
     return i!!.`fun`(400)
    }
   }
   `$1B`().b()
  }
 }
}
