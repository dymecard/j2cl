package innerclassinheritance

open class ParentOuter {
 @kotlin.jvm.JvmField var fieldInParentOuter: Int = 0

 open fun funInParentOuter() {}
}

open class ParentInner {
 @kotlin.jvm.JvmField var fieldInParentInner: Int = 0

 open fun funInParentInner() {}
}

open class ChildClass: innerclassinheritance.ParentOuter() {
 @kotlin.jvm.JvmField var fieldInOuter: Int = 0

 open fun funInOuter() {}

 open fun testLocalClass() {
  open class `$1LocalClass`: innerclassinheritance.ChildClass() {
   @kotlin.jvm.JvmField var `object`: kotlin.Any? = this

   open override fun funInParentOuter() {}

   open fun test() {
    this.funInOuter()
    this@ChildClass.funInOuter()
    this.funInParentOuter()
    this.funInParentOuter()
    this@ChildClass.funInParentOuter()
   }
  }
  `$1LocalClass`().test()
 }

 open inner class InnerClass: innerclassinheritance.ParentInner() {
  @kotlin.jvm.JvmField var fieldInInner: Int = 0

  open fun funInInner() {}

  open fun testInnerClass(): Int {
   this@ChildClass.funInParentOuter()
   this@ChildClass.funInParentOuter()
   this@ChildClass.funInOuter()
   this@ChildClass.funInOuter()
   this.funInParentInner()
   this.funInParentInner()
   this.funInInner()
   this.funInInner()
   var a: Int = this@ChildClass.fieldInParentOuter
   a = this@ChildClass.fieldInParentOuter
   a = this@ChildClass.fieldInOuter
   a = this@ChildClass.fieldInOuter
   a = this.fieldInParentInner
   a = this.fieldInParentInner
   a = this.fieldInInner
   a = this.fieldInInner
   return a
  }
 }
}
